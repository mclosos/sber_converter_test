<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1484480114014" stop="1484480832617">
  <name>sber_converter_test.test_cases</name>
  <labels/>
  <test-cases>
    <test-case start="1484480114014" status="passed" stop="1484480132454">
      <description>
    Test different variables to convert from RUR to USD and check result.
    :param chromium_instance:
    :param sum_to_convert:
    :return:
    </description>
      <name>test_variable_sum[1,50]</name>
      <steps/>
      <labels>
        <label name="testId" value="Check_converting"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480132456" status="failed" stop="1484480150520">
      <description>
    Test different variables to convert from RUR to USD and check result.
    :param chromium_instance:
    :param sum_to_convert:
    :return:
    </description>
      <name>test_variable_sum[100,00]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="0797cfa9ea3661c8ece2121ea9e3dcc5")&gt;, sum_to_convert = '100.00'

    @allure.testcase("Check_converting")
    @pytest.mark.parametrize(testparams[0][0], testparams[0][1:])
    def test_variable_sum(chromium_instance, sum_to_convert):
        """
        Test different variables to convert from RUR to USD and check result.
        :param chromium_instance:
        :param sum_to_convert:
        :return:
        """
        browser = chromium_instance
        browser.implicitly_wait(10)
        sum_of_money = browser.find_element_by_xpath("//div/form/input")
        sum_of_money.clear()
        time.sleep(1.5)
        sum_of_money.send_keys(sum_to_convert)
        time.sleep(1)
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//h4/span[1]")))
        result = browser.find_element_by_xpath("//h4/span[1]").text
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//td[4]/span")))
        price = browser.find_element_by_xpath("//td[4]/span").text
        sum_to_convert = sum_to_convert.replace(',', '.').replace(' ', '')
        price = price.replace(',', '.').replace(' ', '')
        result = result.replace(',', '.').replace(' ', '')
        try:
&gt;           assert (round(Decimal(sum_to_convert) / Decimal(price), 2) == Decimal(result))
E           assert Decimal('1.64') == Decimal('1.62')
E            +  where Decimal('1.64') = round((Decimal('100.00') / Decimal('61.14')), 2)
E            +    where Decimal('100.00') = Decimal('100.00')
E            +    and   Decimal('61.14') = Decimal('61.14')
E            +  and   Decimal('1.62') = Decimal('1.62')

test_cases.py:64: AssertionError</stack-trace>
        <message>AssertionError: assert Decimal('1.64') == Decimal('1.62')
 +  where Decimal('1.64') = round((Decimal('100.00') / Decimal('61.14')), 2)
 +    where Decimal('100.00') = Decimal('100.00')
 +    and   Decimal('61.14') = Decimal('61.14')
 +  and   Decimal('1.62') = Decimal('1.62')</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Check_converting"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480150521" status="failed" stop="1484480167618">
      <description>
    Test different variables to convert from RUR to USD and check result.
    :param chromium_instance:
    :param sum_to_convert:
    :return:
    </description>
      <name>test_variable_sum[99999999999,00]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="e99ad4ba704ec36e6c25ea5b68f61cc8")&gt;, sum_to_convert = '99999999999.00'

    @allure.testcase("Check_converting")
    @pytest.mark.parametrize(testparams[0][0], testparams[0][1:])
    def test_variable_sum(chromium_instance, sum_to_convert):
        """
        Test different variables to convert from RUR to USD and check result.
        :param chromium_instance:
        :param sum_to_convert:
        :return:
        """
        browser = chromium_instance
        browser.implicitly_wait(10)
        sum_of_money = browser.find_element_by_xpath("//div/form/input")
        sum_of_money.clear()
        time.sleep(1.5)
        sum_of_money.send_keys(sum_to_convert)
        time.sleep(1)
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//h4/span[1]")))
        result = browser.find_element_by_xpath("//h4/span[1]").text
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//td[4]/span")))
        price = browser.find_element_by_xpath("//td[4]/span").text
        sum_to_convert = sum_to_convert.replace(',', '.').replace(' ', '')
        price = price.replace(',', '.').replace(' ', '')
        result = result.replace(',', '.').replace(' ', '')
        try:
&gt;           assert (round(Decimal(sum_to_convert) / Decimal(price), 2) == Decimal(result))
E           assert Decimal('1635590448.14') == Decimal('1648710414.61')
E            +  where Decimal('1635590448.14') = round((Decimal('99999999999.00') / Decimal('61.14')), 2)
E            +    where Decimal('99999999999.00') = Decimal('99999999999.00')
E            +    and   Decimal('61.14') = Decimal('61.14')
E            +  and   Decimal('1648710414.61') = Decimal('1648710414.61')

test_cases.py:64: AssertionError</stack-trace>
        <message>AssertionError: assert Decimal('1635590448.14') == Decimal('1648710414.61')
 +  where Decimal('1635590448.14') = round((Decimal('99999999999.00') / Decimal('61.14')), 2)
 +    where Decimal('99999999999.00') = Decimal('99999999999.00')
 +    and   Decimal('61.14') = Decimal('61.14')
 +  and   Decimal('1648710414.61') = Decimal('1648710414.61')</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Check_converting"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480167619" status="passed" stop="1484480181346">
      <description>
    Test converting same currencies (for example: RUR to RUR).
    :param chromium_instance:
    :param currency:
    :return:
    </description>
      <name>test_convert_rur_to_rur[RUR]</name>
      <steps/>
      <labels>
        <label name="testId" value="Same_currencies"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480181348" status="passed" stop="1484480194719">
      <description>
    Test converting same currencies (for example: RUR to RUR).
    :param chromium_instance:
    :param currency:
    :return:
    </description>
      <name>test_convert_rur_to_rur[CHF]</name>
      <steps/>
      <labels>
        <label name="testId" value="Same_currencies"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480194720" status="passed" stop="1484480207994">
      <description>
    Test converting same currencies (for example: RUR to RUR).
    :param chromium_instance:
    :param currency:
    :return:
    </description>
      <name>test_convert_rur_to_rur[EUR]</name>
      <steps/>
      <labels>
        <label name="testId" value="Same_currencies"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480208003" status="passed" stop="1484480230543">
      <description>
    Test converting same currencies (for example: RUR to RUR).
    :param chromium_instance:
    :param currency:
    :return:
    </description>
      <name>test_convert_rur_to_rur[GBP]</name>
      <steps/>
      <labels>
        <label name="testId" value="Same_currencies"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480230548" status="passed" stop="1484480251697">
      <description>
    Test converting same currencies (for example: RUR to RUR).
    :param chromium_instance:
    :param currency:
    :return:
    </description>
      <name>test_convert_rur_to_rur[JPY]</name>
      <steps/>
      <labels>
        <label name="testId" value="Same_currencies"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480251699" status="passed" stop="1484480265224">
      <description>
    Test converting same currencies (for example: RUR to RUR).
    :param chromium_instance:
    :param currency:
    :return:
    </description>
      <name>test_convert_rur_to_rur[USD]</name>
      <steps/>
      <labels>
        <label name="testId" value="Same_currencies"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480265225" status="passed" stop="1484480283685">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[1-2-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480283687" status="failed" stop="1484480320041">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[1-2-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="3223306f5f91ed9b4a927c0da2de2a2a")&gt;, year = '2002', month = '2', day = '1'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
            "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//dl/span[contains(., 'Выбрать')]")))
        browser.find_element_by_xpath("//dl/span[contains(., 'Выбрать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        time.sleep(1)
        try:
&gt;           result = browser.find_element_by_xpath("//h4/span[1]").text.replace(',', '.')

test_cases.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec1602710&gt;
response = {'sessionId': '3223306f5f91ed9b4a927c0da2de2a2a', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480320042" status="passed" stop="1484480337437">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[1-6-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480337439" status="failed" stop="1484480375069">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[1-6-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="6eff5f61258d7bbdcfb1df224171453a")&gt;, year = '2002', month = '6', day = '1'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
            "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//dl/span[contains(., 'Выбрать')]")))
        browser.find_element_by_xpath("//dl/span[contains(., 'Выбрать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        time.sleep(1)
        try:
&gt;           result = browser.find_element_by_xpath("//h4/span[1]").text.replace(',', '.')

test_cases.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec1636630&gt;
response = {'sessionId': '6eff5f61258d7bbdcfb1df224171453a', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480375071" status="passed" stop="1484480395153">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[1-12-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480395154" status="failed" stop="1484480436055">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[1-12-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="25f40c0ebd46a4ccef475a45e7c1dd4a")&gt;, year = '2002', month = '12', day = '1'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
            "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//dl/span[contains(., 'Выбрать')]")))
        browser.find_element_by_xpath("//dl/span[contains(., 'Выбрать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        time.sleep(1)
        try:
&gt;           result = browser.find_element_by_xpath("//h4/span[1]").text.replace(',', '.')

test_cases.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec187ec88&gt;
response = {'sessionId': '25f40c0ebd46a4ccef475a45e7c1dd4a', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480436056" status="passed" stop="1484480454172">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[15-2-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480454173" status="failed" stop="1484480494689">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[15-2-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="d6d32fc0b4aa52f6100dab96ffbbf12c")&gt;, year = '2002', month = '2', day = '15'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
            "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//dl/span[contains(., 'Выбрать')]")))
        browser.find_element_by_xpath("//dl/span[contains(., 'Выбрать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        time.sleep(1)
        try:
&gt;           result = browser.find_element_by_xpath("//h4/span[1]").text.replace(',', '.')

test_cases.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec187ee80&gt;
response = {'sessionId': 'd6d32fc0b4aa52f6100dab96ffbbf12c', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480494690" status="passed" stop="1484480513652">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[15-6-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480513654" status="failed" stop="1484480553686">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[15-6-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="3d5d6759338fc45328db4abc920c306b")&gt;, year = '2002', month = '6', day = '15'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
            "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//dl/span[contains(., 'Выбрать')]")))
        browser.find_element_by_xpath("//dl/span[contains(., 'Выбрать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        time.sleep(1)
        try:
&gt;           result = browser.find_element_by_xpath("//h4/span[1]").text.replace(',', '.')

test_cases.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec160bdd8&gt;
response = {'sessionId': '3d5d6759338fc45328db4abc920c306b', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480553689" status="passed" stop="1484480578444">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[15-12-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480578445" status="failed" stop="1484480625250">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[15-12-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="6d96c91ad758a547f34ef9dc0ec216a5")&gt;, year = '2002', month = '12', day = '15'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
            "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//dl/span[contains(., 'Выбрать')]")))
        browser.find_element_by_xpath("//dl/span[contains(., 'Выбрать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        time.sleep(1)
        try:
&gt;           result = browser.find_element_by_xpath("//h4/span[1]").text.replace(',', '.')

test_cases.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec1636a58&gt;
response = {'sessionId': '6d96c91ad758a547f34ef9dc0ec216a5', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480625252" status="passed" stop="1484480641274">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[29-2-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480641275" status="failed" stop="1484480695078">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[29-2-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="498b1fb33675a4be70222e74f6cb4ea3")&gt;, year = '2002', month = '2', day = '29'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
&gt;           "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()

test_cases.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec15c5898&gt;
response = {'sessionId': '498b1fb33675a4be70222e74f6cb4ea3', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='29']"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='29']"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480695080" status="passed" stop="1484480721359">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[29-6-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480721360" status="failed" stop="1484480761329">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[29-6-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="830e7f4b3a1d64236d276f68cc215a65")&gt;, year = '2002', month = '6', day = '29'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
            "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//dl/span[contains(., 'Выбрать')]")))
        browser.find_element_by_xpath("//dl/span[contains(., 'Выбрать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        time.sleep(1)
        try:
&gt;           result = browser.find_element_by_xpath("//h4/span[1]").text.replace(',', '.')

test_cases.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec1ac07f0&gt;
response = {'sessionId': '830e7f4b3a1d64236d276f68cc215a65', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480761331" status="passed" stop="1484480792526">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[29-12-2016]</name>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
    <test-case start="1484480792529" status="failed" stop="1484480832617">
      <description>
    Test converting with different dates.
    :param chromium_instance:
    :param year:
    :param month:
    :param day:
    :return:
    </description>
      <name>test_early_date[29-12-2002]</name>
      <failure>
        <stack-trace>chromium_instance = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="646d683be34d5a2c87d8be56663660a8")&gt;, year = '2002', month = '12', day = '29'

    @allure.testcase("Old dates")
    @pytest.mark.parametrize(testparams[2][0], testparams[2][1:])
    @pytest.mark.parametrize(testparams[3][0], testparams[3][1:])
    @pytest.mark.parametrize(testparams[4][0], testparams[4][1:])
    def test_early_date(chromium_instance, year, month, day):
        """
        Test converting with different dates.
        :param chromium_instance:
        :param year:
        :param month:
        :param day:
        :return:
        """
        browser = chromium_instance
        browser.find_element_by_xpath("//div[6]/label[2]/p").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//*[@id='ui-datepicker-div']"))
        browser.find_element_by_xpath("//div[6]/div[2]/span").click()
        WebDriverWait(browser, 10).until(
            lambda x: browser.find_element_by_xpath("//div/div/select/option[contains(text(), " + year + ")]"))
        browser.find_element_by_xpath(
            "//div/div/select/option[contains(text(), " + year + ")]").click()
        for i in range(int(month) - 1):
            browser.find_element_by_xpath(
                "//*[@id='ui-datepicker-div']/div[1]/a[2]").click()
        browser.find_element_by_xpath(
            "//div[@id='ui-datepicker-div']//a[@class='ui-state-default'][text()='"+ day + "']").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//dl/span[contains(., 'Выбрать')]")))
        browser.find_element_by_xpath("//dl/span[contains(., 'Выбрать')]").click()
        WebDriverWait(browser, 10).until(ec.element_to_be_clickable((By.XPATH,
                                                                     "//div[7]/button[contains(., 'Показать')]")))
        browser.find_element_by_xpath("//div[7]/button[contains(., 'Показать')]").click()
        time.sleep(1)
        try:
&gt;           result = browser.find_element_by_xpath("//h4/span[1]").text.replace(',', '.')

test_cases.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:293: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:752: in find_element
    'value': value})['value']
../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f4ec15cc780&gt;
response = {'sessionId': '646d683be34d5a2c87d8be56663660a8', 'status': 7, 'value': {'message': 'no such element: Unable to locate...}\n  (Session info: chrome=53.0.2785.143)\n  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)'}}

    def check_response(self, response):
        """
            Checks that a JSON response from the WebDriver does not have an error.
    
            :Args:
             - response - The JSON response from the WebDriver server as a dictionary
               object.
    
            :Raises: If the response contains an error message.
            """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
    
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            try:
                                message = message['message']
                            except TypeError:
                                message = None
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = WebDriverException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = WebDriverException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:
            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
E         (Session info: chrome=53.0.2785.143)
E         (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)

../../.virtualenvs/sber_converter_test/lib/python3.4/site-packages/selenium/webdriver/remote/errorhandler.py:192: NoSuchElementException</stack-trace>
        <message>NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//h4/span[1]"}
  (Session info: chrome=53.0.2785.143)
  (Driver info: chromedriver=2.22,platform=Linux 4.4.0-59-generic x86_64)
</message>
      </failure>
      <steps/>
      <labels>
        <label name="testId" value="Old dates"/>
        <label name="severity" value="normal"/>
        <label name="thread" value="17293-MainThread"/>
        <label name="host" value="mclososx"/>
      </labels>
      <attachments/>
    </test-case>
  </test-cases>
</ns0:test-suite>
